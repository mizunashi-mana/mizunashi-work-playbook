---
- name: Directory of private CA is available
  ansible.builtin.file:
    path: '{{ private_ca_root_dir }}'
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: true

- set_fact:
    private_ca_dirs:
    - rootCA
    - interCA_TLS

- name: Directories of private CAs are available
  ansible.builtin.file:
    path: '{{ private_ca_root_dir }}/{{ item }}'
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: true
  loop: '{{ private_ca_dirs }}'

- name: Directories of CRLs of private CAs are available
  ansible.builtin.file:
    path: '{{ private_ca_root_dir }}/{{ item }}/crl'
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: true
  loop: '{{ private_ca_dirs }}'

- name: Directories of new certifications of private CAs are available
  ansible.builtin.file:
    path: '{{ private_ca_root_dir }}/{{ item }}/newcerts'
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: true
  loop: '{{ private_ca_dirs }}'

- name: Directories of keys of private CAs are available
  ansible.builtin.file:
    path: '{{ private_ca_root_dir }}/{{ item }}/private'
    state: directory
    owner: root
    group: root
    mode: '0700'
  become: true
  loop: '{{ private_ca_dirs }}'

- name: Directories of datas of private CAs are available
  ansible.builtin.file:
    path: '{{ private_ca_root_dir }}/{{ item }}/var'
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: true
  loop: '{{ private_ca_dirs }}'

- name: Serial files of CAs are available
  ansible.builtin.file:
    path: '{{ private_ca_root_dir }}/{{ item }}/var/serial'
    state: file
    owner: root
    group: root
    mode: '0644'
  failed_when: false
  become: true
  loop: '{{ private_ca_dirs }}'
  register: private_ca_serial_files_stats

- name: Initialize serial numbers of CAs if needed
  ansible.builtin.copy:
    content: '01'
    dest: '{{ private_ca_root_dir }}/{{ item.item }}/var/serial'
    owner: root
    group: root
    mode: '0644'
  become: true
  when: item.state != 'file'
  loop: '{{ private_ca_serial_files_stats.results }}'

- name: CRL number files of CAs are available
  ansible.builtin.file:
    path: '{{ private_ca_root_dir }}/{{ item }}/var/crlnumber'
    state: file
    owner: root
    group: root
    mode: '0644'
  failed_when: false
  become: true
  loop: '{{ private_ca_dirs }}'
  register: private_ca_crlnumber_files_stats

- name: Initialize CRL numbers of CAs if needed
  ansible.builtin.copy:
    content: '01'
    dest: '{{ private_ca_root_dir }}/{{ item.item }}/var/crlnumber'
    owner: root
    group: root
    mode: '0644'
  become: true
  when: item.state != 'file'
  loop: '{{ private_ca_crlnumber_files_stats.results }}'

- name: Index files of CAs are available
  ansible.builtin.file:
    path: '{{ private_ca_root_dir }}/{{ item }}/var/index.txt'
    state: file
    owner: root
    group: root
    mode: '0644'
  failed_when: false
  become: true
  loop: '{{ private_ca_dirs }}'
  register: private_ca_index_files_stats

- name: Initialize indexes of CAs if needed
  ansible.builtin.copy:
    content: ''
    dest: '{{ private_ca_root_dir }}/{{ item.item }}/var/index.txt'
    owner: root
    group: root
    mode: '0644'
  become: true
  when: item.state != 'file'
  loop: '{{ private_ca_index_files_stats.results }}'

- name: Copy CA certificate request configs
  ansible.builtin.template:
    src: 'etc/pki/private-local/{{ item }}/cacert.cnf'
    dest: '{{ private_ca_root_dir }}/{{ item }}/cacert.cnf'
    owner: root
    group: root
    mode: '0644'
    backup: true
  become: true
  loop: '{{ private_ca_dirs }}'

- name: Copy CA configs
  ansible.builtin.template:
    src: 'etc/pki/private-local/{{ item }}/ca.cnf'
    dest: '{{ private_ca_root_dir }}/{{ item }}/ca.cnf'
    owner: root
    group: root
    mode: '0644'
    backup: true
  become: true
  loop: '{{ private_ca_dirs }}'

- name: Create root CA certificate
  ansible.builtin.command:
    cmd: |
      openssl req
        -config '{{ private_ca_root_dir }}/rootCA/cacert.cnf'
        -x509
        -newkey EC
        -pkeyopt ec_paramgen_curve:prime256v1
        -passout 'pass:{{ private_ca_root_key_password }}'
        -days {{ private_ca_root_ca_days }}
        -out '{{ private_ca_root_dir }}/rootCA/cacert.pem'
        -keyout '{{ private_ca_root_dir }}/rootCA/private/cakey.pem'
    creates: '{{ private_ca_root_dir }}/rootCA/cacert.pem'
  become: true
  no_log: true

- name: Create intermediate CA certificate request for servers
  ansible.builtin.command:
    cmd: |
      openssl req
        -config '{{ private_ca_root_dir }}/interCA_TLS/cacert.cnf'
        -newkey EC
        -pkeyopt ec_paramgen_curve:prime256v1
        -passout 'pass:{{ private_ca_inter_tls_key_password }}'
        -out '{{ private_ca_root_dir }}/interCA_TLS/cacert.csr'
        -keyout '{{ private_ca_root_dir }}/interCA_TLS/private/cakey.pem'
    creates: '{{ private_ca_root_dir }}/interCA_TLS/cacert.csr'
  become: true
  no_log: true

- name: Create intermediate CA certificate for servers
  ansible.builtin.command:
    cmd: |
      openssl ca
        -config '{{ private_ca_root_dir }}/rootCA/ca.cnf'
        -notext
        -batch
        -passin 'pass:{{ private_ca_root_key_password }}'
        -in '{{ private_ca_root_dir }}/interCA_TLS/cacert.csr'
        -days {{ private_ca_inter_ca_days }}
        -out '{{ private_ca_root_dir }}/interCA_TLS/cacert.pem'
    creates: '{{ private_ca_root_dir }}/interCA_TLS/cacert.pem'
  become: true
  no_log: true

- name: Generate CRLs
  ansible.builtin.command:
    cmd: |
      openssl ca
        -config '{{ private_ca_root_dir }}/{{ item }}/ca.cnf'
        -gencrl
        -out '{{ private_ca_root_dir }}/{{ item }}/ca.crl'
    creates: '{{ private_ca_root_dir }}/{{ item }}/ca.crl'
  become: true
  loop: '{{ private_ca_dirs }}'

- name: Copy generate certificate request script
  ansible.builtin.template:
    src: usr/local/sbin/private-ca-gen-csr
    dest: /usr/local/sbin/private-ca-gen-csr
    owner: root
    group: root
    mode: '0755'
    backup: true
  become: true

- name: Copy generate TLS certificate script
  ansible.builtin.template:
    src: usr/local/sbin/private-ca-gen-tls-cert
    dest: /usr/local/sbin/private-ca-gen-tls-cert
    owner: root
    group: root
    mode: '0755'
    backup: true
  become: true
