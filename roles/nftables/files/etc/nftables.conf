#!/usr/sbin/nft -f

flush ruleset

table inet filter {
  chain input {
    type filter hook input priority 0;

    # default drop
    policy drop;

    # accept all established inbound connections
    ct state { established, related } accept;

    # accept all loopback traffic
    iif lo accept;

    jump filter_broadcast;
    jump filter_fragments;
    jump filter_invalids;
    jump filter_icmp;
    jump filter_synflood;
    jump reject_auth_ident;

    include "/etc/nftables-inbound.d/*.conf";

    jump drop_others;
  }

  chain forward {
    type filter hook forward priority 0;

    # default drop
    policy drop;

    # accept all established inbound connections
    ct state { established, related } accept;

    # accept all loopback traffic
    iif lo accept;
  }

  chain output {
    type filter hook output priority 0;

    # default accept
    policy accept;
  }

  chain filter_broadcast {
    pkttype != { broadcast, multicast } return;
    drop;
  }

  chain filter_fragments {
    ip frag-off & 0x1fff 0 return;
    limit rate 6/minute burst 10 packets log prefix "[NFTABLES FRAGMENT]: " level debug continue;
    drop;
  }

  chain filter_invalids {
    ct state != invalid return;
    limit rate 6/minute burst 10 packets log prefix "[NFTABLES INVALID]: " level debug continue;
    drop;
  }

  chain filter_icmp {
    icmpv6 type {
      destination-unreachable,
      packet-too-big,
      time-exceeded,
      parameter-problem,
      nd-router-advert,
      nd-neighbor-solicit,
      nd-neighbor-advert,
    } accept;
    icmp type {
      destination-unreachable,
      router-advertisement,
      time-exceeded,
      parameter-problem,
    } accept;

    # echo-request
    jump filter_pingdeath;
    icmp type echo-request accept;
  }

  chain filter_pingdeath {
    icmp type != echo-request return;
    meter ping_scan { ip saddr limit rate 1/second burst 4 packets } return;
    limit rate 6/minute burst 10 packets log prefix "[NFTABLES PING_DEATH]: " level debug continue;
    drop;
  }

  chain filter_synflood {
    ct state != new return;
    meter syn_scan { ip saddr limit rate 2/second burst 100 packets } return;
    limit rate 6/minute burst 10 packets log prefix "[NFTABLES SYNFLOOD]: " level debug continue;
    drop;
  }

  chain drop_others {
    limit rate 6/minute burst 10 packets log prefix "[NFTABLES SCANNED]: " level debug continue;
    drop;
  }

  chain reject_auth_ident {
    tcp dport { 113 } reject with tcp reset;
  }
}
