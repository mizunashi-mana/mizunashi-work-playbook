#!/usr/sbin/nft -f

flush ruleset

table inet filter {
  set filter_icmpv6_blackhole {
    type ipv6_addr
    size 65535
    flags dynamic,timeout
  }

  set filter_icmp_blackhole {
    type ipv4_addr
    size 65535
    flags dynamic,timeout
  }

  set filter_tcp_ipv6_blackhole {
    type ipv6_addr
    size 65535
    flags dynamic,timeout
  }

  set filter_tcp_ipv4_blackhole {
    type ipv4_addr
    size 65535
    flags dynamic,timeout
  }

  chain input {
    type filter hook input priority 0;

    # The default policy of inbound is dropping.
    policy drop;

    # Accept all loopback traffic.
    iif lo accept;

    jump accept_established_packets;
    jump accept_basic_icmp_packets;

    jump filter_pingflood;
    jump accept_echo_requests;

    jump filter_broadcast;
    jump filter_fragments;
    jump filter_invalids;

    jump filter_synflood;
    jump reject_auth_ident;

    include "/etc/nftables-inbound.d/*.conf";

    goto drop_others;
  }

  chain forward {
    type filter hook forward priority 0;

    # The default policy of forward is dropping.
    policy drop;

    # Accept all loopback traffic
    iif lo accept;

    jump accept_established_packets;

    goto drop_others;
  }

  chain output {
    type filter hook output priority 0;

    # The default policy of outbound is accepting.
    policy accept;

    # Accept all loopback traffic
    oif lo accept;

    # TODO: We should check and protect outbound traffic of malwares.    
    include "/etc/nftables-outbound.d/*.conf";
  }

  chain accept_established_packets {
    ct state { established, related } accept;
  }

  chain accept_basic_icmp_packets {
    icmpv6 type {
      destination-unreachable,
      packet-too-big,
      time-exceeded,
      parameter-problem,
      nd-router-advert,
      nd-neighbor-solicit,
      nd-neighbor-advert,
    } accept;
    icmp type {
      destination-unreachable,
      router-advertisement,
      time-exceeded,
      parameter-problem,
    } accept;
  }

  chain accept_echo_requests {
    icmpv6 type echo-request accept;
    icmp type echo-request accept;
  }

  # Broadcast packets are often noisy and useful for attacks.
  chain filter_broadcast {
    pkttype != { broadcast, multicast } return;
    limit rate 1/minute log prefix "[NFTABLES BROADCAST]" group 17 continue;
    drop;
  }

  # Packet fragmentation is often used for DoS attacks. We should limit the rate.
  chain filter_fragments {
    ip6 nexthdr != ipv6-frag return;
    ip frag-off & 0x1fff 0 return;
    limit rate 6/minute burst 10 packets log prefix "[NFTABLES FRAGMENT]" group 17 continue;
    drop;
  }

  # Invalid TCP sessions are often used for DoS attacks. We should limit the rate.
  chain filter_invalids {
    ct state != invalid return;
    limit rate 6/minute burst 10 packets log prefix "[NFTABLES INVALID]" group 17 continue;
    drop;
  }

  # Ping packets are often used for DoS attacks. We should limit the rate.
  chain filter_pingflood {
    ip6 nexthdr != icmp return;
    ip protocol != icmp return;
    icmpv6 type != echo-request return;
    icmp type != echo-request return;
    icmpv6 type echo-request add @filter_icmpv6_blackhole { ip6 saddr timeout 1m limit rate 1/second burst 4 packets } return;
    icmp type echo-request add @filter_icmp_blackhole { ip saddr timeout 1m limit rate 1/second burst 4 packets } return;
    limit rate 6/minute burst 10 packets log prefix "[NFTABLES PING_FLOOD]" group 17 continue;
    drop;
  }

  # TCP SYN packets are often used for DoS attacks. We should limit the rate.
  chain filter_synflood {
    ct state != new return;
    ip6 nexthdr != tcp return;
    ip protocol != tcp return;
    ip6 nexthdr tcp add @filter_tcp_ipv6_blackhole { ip6 saddr timeout 10s limit rate 2/second burst 100 packets } return;
    ip protocol tcp add @filter_tcp_ipv4_blackhole { ip saddr timeout 10s limit rate 2/second burst 100 packets } return;
    limit rate 6/minute burst 10 packets log prefix "[NFTABLES SYN_FLOOD]" group 17 continue;
    drop;
  }

  # Mail servers often slow if the ident port is filtering, since they check
  # the ident port with their timeout. Therefore, we should reset TCP sessions
  # of the ident port soon specially.
  chain reject_auth_ident {
    tcp dport { 113 } reject with tcp reset;
  }

  chain drop_others {
    limit rate 6/minute burst 10 packets log prefix "[NFTABLES SCANNED]" group 17 continue;
    drop;
  }

  include "/etc/nftables-chain.d/*.conf";
}
