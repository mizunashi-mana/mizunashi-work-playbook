---
- name: Request minio started
  ansible.builtin.meta: flush_handlers

- name: Set MC host
  set_fact:
    minio_setup_target_endpoint: |
      http://{{ minio_root_user }}:{{ minio_root_password }}@127.0.0.1:{{ minio_server_listen_port }}
  no_log: true

- name: Select users
  ansible.builtin.command:
    cmd: mcli --json admin user list minio_setup_target
  environment:
    MC_HOST_minio_setup_target: '{{ minio_setup_target_endpoint }}'
  changed_when: false
  register: minio_setup_select_users_result

- name: Extract users
  ansible.builtin.set_fact:
    minio_setup_current_users: |
      {{ minio_setup_select_users_result.stdout
        |regex_replace('^{', "---\n{", multiline=True)
        |from_yaml_all
        |selectattr("userStatus", "defined")
        |community.general.json_query("[].{key:accessKey,value:@}")
        |items2dict
        }}

- name: Add users
  ansible.builtin.command:
    cmd: |
      mcli admin user add minio_setup_target
        '{{ item }}'
        '{{ minio_setup_user_entries[item].secret_key }}'
  environment:
    MC_HOST_minio_setup_target: '{{ minio_setup_target_endpoint }}'
  when: not item in minio_setup_current_users
  no_log: true
  loop: '{{ minio_setup_user_entries|dict2items|map(attribute="key") }}'

- name: Select buckets
  ansible.builtin.command:
    cmd: mcli find --maxdepth 1 minio_setup_target/
  environment:
    MC_HOST_minio_setup_target: '{{ minio_setup_target_endpoint }}'
  changed_when: false
  register: minio_setup_select_buckets_result

- name: Extract buckets
  ansible.builtin.set_fact:
    minio_setup_current_buckets: |
      {{
        minio_setup_select_buckets_result.stdout_lines
        | map('regex_replace', '^minio_setup_target/(.+)$', '\1')
        | list
        }}

- name: Add buckets
  ansible.builtin.command:
    cmd: |
      mcli mb --with-lock 'minio_setup_target/{{ item }}'
  environment:
    MC_HOST_minio_setup_target: '{{ minio_setup_target_endpoint }}'
  when: not item in minio_setup_current_buckets
  loop: '{{ minio_setup_bucket_entries|dict2items|map(attribute="key") }}'

- name: Check retension policy of buckets
  ansible.builtin.command:
    cmd: |
      mcli --json retention info --default 'minio_setup_target/{{ item }}'
  environment:
    MC_HOST_minio_setup_target: '{{ minio_setup_target_endpoint }}'
  changed_when: false
  loop: '{{ minio_setup_bucket_entries|dict2items|map(attribute="key") }}'
  register: minio_setup_bucket_retention_result

- name: Add retension policy of buckets
  ansible.builtin.command:
    cmd: |
      mcli retention set --default GOVERNANCE
        '{{ minio_setup_bucket_entries[item.item].retension_days }}d'
        'minio_setup_target/{{ item.item }}'
  environment:
    MC_HOST_minio_setup_target: '{{ minio_setup_target_endpoint }}'
  when: |
    (item.stdout|from_json).mode == ""
  loop: '{{ minio_setup_bucket_retention_result.results }}'

- name: Directory to provision minio is available
  ansible.builtin.file:
    path: /etc/minio_provision
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: true

- name: Provision policies
  ansible.builtin.template:
    src: etc/minio_provision/policy_xxx.json
    dest: '/etc/minio_provision/policy_{{ item.key }}.json'
    owner: root
    group: root
    mode: '0644'
    backup: true
  become: true
  loop: '{{ minio_setup_policy_entries|dict2items }}'

- name: Select policies
  ansible.builtin.command:
    cmd: mcli admin policy list minio_setup_target
  environment:
    MC_HOST_minio_setup_target: '{{ minio_setup_target_endpoint }}'
  changed_when: false
  register: minio_setup_select_policies_result

- name: Create policies
  ansible.builtin.command:
    cmd: |
      mcli admin policy create minio_setup_target
        '{{ item }}'
        '/etc/minio_provision/policy_{{ item }}.json'
  environment:
    MC_HOST_minio_setup_target: '{{ minio_setup_target_endpoint }}'
  become: true
  when: not item in minio_setup_select_policies_result.stdout_lines
  loop: '{{ minio_setup_policy_entries|dict2items|map(attribute="key") }}'

- name: Attach policies
  ansible.builtin.command:
    cmd: |
      mcli admin policy attach minio_setup_target
        '{{ minio_setup_user_entries[item].attach_policy }}'
        --user '{{ item }}'
  environment:
    MC_HOST_minio_setup_target: '{{ minio_setup_target_endpoint }}'
  when: |
    (not item in minio_setup_current_users)
      or (not "policyName" in minio_setup_current_users[item])
  loop: '{{ minio_setup_user_entries|dict2items|map(attribute="key") }}'
